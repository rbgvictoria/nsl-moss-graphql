#import ../../app/Http/GraphQL/Types/Author.graphql
#import ../../app/Http/GraphQL/Types/TaxonomicNameUsage.graphql
#import ../../app/Http/GraphQL/Types/InstanceType.graphql
#import ../../app/Http/GraphQL/Types/TaxonomicName.graphql
#import ../../app/Http/GraphQL/Types/NameCategory.graphql
#import ../../app/Http/GraphQL/Types/NameGroup.graphql
#import ../../app/Http/GraphQL/Types/NameRank.graphql
#import ../../app/Http/GraphQL/Types/NameStatus.graphql
#import ../../app/Http/GraphQL/Types/NameType.graphql
#import ../../app/Http/GraphQL/Types/RefAuthorRole.graphql
#import ../../app/Http/GraphQL/Types/RefType.graphql
#import ../../app/Http/GraphQL/Types/Reference.graphql
#import ../../app/Http/GraphQL/Types/Scalars.graphql

type Query {
    authors: [Author!]! @paginate(type: "paginator")
    author(id: ID @eq): Author @find

    taxonomicNameUsages: [TaxonomicNameUsage!]! @paginate(type: "paginator")
    taxonomicNameUsage(id: ID @eq): TaxonomicNameUsage @find

    taxonomicNames(fullName: String @contains): [TaxonomicName!]! @paginate(type: "paginator", scopes: ["orderByFullName"])
    taxonomicName(id: ID @eq): TaxonomicName @find

    references: [Reference!]! @paginate(type: "paginator")
    reference(id: ID @eq): Reference @find
}
