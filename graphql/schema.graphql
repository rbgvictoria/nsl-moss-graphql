#import ../app/GraphQL/Types/Author.graphql
#import ../app/GraphQL/Types/TaxonomicNameUsage.graphql
#import ../app/GraphQL/Types/TaxonomicNameUsageType.graphql
#import ../app/GraphQL/Types/TaxonomicNameUsageNote.graphql
#import ../app/GraphQL/Types/TaxonomicName.graphql
#import ../app/GraphQL/Types/NameCategory.graphql
#import ../app/GraphQL/Types/NameGroup.graphql
#import ../app/GraphQL/Types/NameRank.graphql
#import ../app/GraphQL/Types/NameStatus.graphql
#import ../app/GraphQL/Types/NameType.graphql
#import ../app/GraphQL/Types/RefAuthorRole.graphql
#import ../app/GraphQL/Types/RefType.graphql
#import ../app/GraphQL/Types/Reference.graphql
#import ../app/GraphQL/Types/Scalars.graphql
#import ../app/GraphQL/Types/TaxonomicNameUsageFilter.graphql
#import ../app/GraphQL/Types/TreeNode.graphql
#import ../app/GraphQL/Types/Location.graphql
#import ../app/GraphQL/Types/Distribution.graphql


type Query {
    authors: [Author!]! @paginate(type: "paginator")
    author(id: ID @eqUri): Author @find

    taxonomicNames(fullName: String @contains): [TaxonomicName!]! @paginate(type: "paginator", scopes: ["orderByFullName"])
    taxonomicName(id: ID @eqUri): TaxonomicName @find

    taxonomicNameUsages(
        filter: TaxonomicNameUsageFilter
    ): [TaxonomicNameUsage!]! @paginate(builder: "App\\Models\\TaxonomicNameUsage@build")
    taxonomicNameUsage(id: ID @eqUri): TaxonomicNameUsage @find

    references: [Reference!]! @paginate(type: "paginator")
    reference(id: ID @eqUri): Reference @find
}
